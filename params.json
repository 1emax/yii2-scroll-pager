{
  "name": "Yii2-scroll-pager",
  "tagline": "Infinite AJAX scrolling for Yii2 ListView widget",
  "body": "Yii2 Scroll Pager\r\n=================\r\n\r\n[Yii2 Scroll Pager (Y2SP)](http://kop.github.io/yii2-scroll-pager) turns your regular paginated page into an\r\ninfinite scrolling page using AJAX.\r\n\r\nY2SP works with a `Pagination` object which specifies the totally number of pages and the current page number.\r\n\r\nPager is build with help of [JQuery Infinite Ajax Scroll plugin](http://infiniteajaxscroll.com/).\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/kop/yii2-scroll-pager/v/stable.svg)](https://packagist.org/packages/kop/yii2-scroll-pager)\r\n[![Code Climate](https://codeclimate.com/github/kop/yii2-scroll-pager.png)](https://codeclimate.com/github/kop/yii2-scroll-pager)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/kop/yii2-scroll-pager/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/kop/yii2-scroll-pager/?branch=master)\r\n[![Dependency Status](https://gemnasium.com/kop/yii2-scroll-pager.svg)](https://gemnasium.com/kop/yii2-scroll-pager)\r\n[![License](https://poser.pugx.org/kop/yii2-scroll-pager/license.svg)](https://packagist.org/packages/kop/yii2-scroll-pager)\r\n\r\n\r\n\r\n## Requirements\r\n\r\n- Yii 2.0\r\n- PHP 5.4\r\n\r\n\r\n\r\n## Installation\r\n\r\nThe preferred way to install this extension is through [Composer](http://getcomposer.org/).\r\n\r\nEither run\r\n\r\n``` php composer.phar require kop/yii2-scroll-pager \"dev-master\" ```\r\n\r\nor add\r\n\r\n``` \"kop/yii2-scroll-pager\": \"dev-master\"```\r\n\r\nto the `require` section of your `composer.json` file.\r\n\r\n\r\n\r\n## Usage\r\n\r\nJust pass the ScrollPager class name to the ListView `pager` configuration.\r\nMake sure that items in your list have some classes that can be used as JavaScript selectors.\r\n\r\n### ListView\r\n\r\n```php\r\necho ListView::widget([\r\n     'dataProvider' => $dataProvider,\r\n     'itemOptions' => ['class' => 'item'],\r\n     'itemView' => '_item_view',\r\n     'pager' => ['class' => \\kop\\y2sp\\ScrollPager::className()]\r\n]);\r\n```\r\n\r\n### GridView\r\n\r\n```php\r\necho GridView::widget([\r\n     'dataProvider' => $dataProvider,\r\n     'pager' => [\r\n        'class' => \\kop\\y2sp\\ScrollPager::className(),\r\n        'container' => '.grid-view tbody',\r\n        'item' => 'tr',\r\n        'paginationSelector' => '.grid-view .pagination',\r\n        'triggerTemplate' => '<tr class=\"ias-trigger\"><td colspan=\"100%\" style=\"text-align: center\"><a style=\"cursor: pointer\">{text}</a></td></tr>',\r\n     ],\r\n]);\r\n```\r\n\r\n\r\n## Configuration\r\n\r\n\r\n### General Options\r\n\r\n| Option name  \t     | Description  \t| Default value |\r\n|---\t             |---\t            |---\t        |\r\n| container  \t     | The selector of the element containing your items that you want to paginate. | `.list-view` |\r\n| item  \t         | The selector of the element that each item has.<br Make sure the elements are inside the container element. | `.item` |\r\n| paginationSelector | The selector of the element containing the pagination. | `.list-view .pagination` |\r\n| next  \t         | The selector of the link element that links to the next page.<br> The href attribute of this element will be used to get the items from the next page.<br> Make sure there is only one(1) element that matches the selector. | `.next a` |\r\n| delay  \t         | Minimal number of milliseconds to stay in a loading state. | `600` |\r\n| negativeMargin  \t | By default IAS starts loading new items when you scroll to the latest `.item` element.<br> The `negativeMargin` will be added to the items offset, giving you the ability to load new items earlier (please note that the margin is always transformed to a negative integer).<br><br> *Example:* Setting a negativeMargin of 250 means that IAS will start loading 250 pixel before the last item has scrolled into view. | `10` |\r\n\r\n\r\n### Extensions\r\n\r\n| Option name  \t     | Description  \t| Default value |\r\n|---\t             |---\t            |---\t        |\r\n| enabledExtensions  | The list of the enabled plugin extensions. | [<br>&emsp; `ScrollPager::EXTENSION_TRIGGER`, <br>&emsp; `ScrollPager::EXTENSION_SPINNER`, <br>&emsp; `ScrollPager::EXTENSION_NONE_LEFT`, <br>&emsp; `ScrollPager::EXTENSION_PAGING`, <br>&emsp; `ScrollPager::EXTENSION_HISTORY` <br>] |\r\n\r\n\r\n### Extension Options\r\n\r\n| Option name  \t     | Description  \t| Default value |\r\n|---\t             |---\t            |---\t        |\r\n| triggerText  \t     | Text of trigger the link. | `Load more items` |\r\n| triggerTemplate  \t | Allows you to override the trigger html template. | `<div class=\"ias-trigger\" style=\"text-align: center; cursor: pointer;\"><a>{text}</a></div>` |\r\n| triggerOffset  \t | The number of pages which should load automatically. After that the trigger is shown for every subsequent page.<br><br> *Example:* if you set the offset to 2, the pages 2 and 3 (page 1 is always shown) would load automatically and for every subsequent page the user has to press the trigger to load it. | `0` |\r\n| spinnerSrc  \t     | The src attribute of the spinner image. | ![Spinner Image](https://raw.githubusercontent.com/kop/yii2-scroll-pager/v1.0.2/assets/infinite-ajax-scroll/images/loader.gif) |\r\n| spinnerTemplate  \t | Allows you to override the spinner html template. | `<div class=\"ias-spinner\" style=\"text-align: center;\"><img src=\"{src}\"/></div>` |\r\n| noneLeftText  \t | Text of the \"nothing left\" message. | `You reached the end` |\r\n| noneLeftTemplate   | Allows you to override the \"nothing left\" message html template. | `<div class=\"ias-noneleft\" style=\"text-align: center;\">{text}</div>` |\r\n| historyPrev  \t     | The selector of the link element that links to the previous page.<br> The href attribute of this element will be used to get the items from the previous page.<br> Make sure there is only one element that matches the selector. | `.previous` |\r\n| overflowContainer  | A selector for `div` HTML element to use as an overflow container. | `null` |\r\n\r\n\r\n### Plugin Events\r\n\r\n| Option name  \t     | Description  \t| Default value |\r\n|---\t             |---\t            |---\t        |\r\n| eventOnScroll  \t | Triggered when the visitors scrolls. | `null` |\r\n| eventOnLoad  \t     | Triggered when a new url will be loaded from the server. | `null` |\r\n| eventOnLoaded  \t | Triggered after a new page was loaded from the server. | `null` |\r\n| eventOnRender  \t | Triggered before new items will be rendered. | `null` |\r\n| eventOnRendered  \t | Triggered after new items have rendered. | `null` |\r\n| eventOnNoneLeft  \t | Triggered when there are no more pages left. | `null` |\r\n| eventOnNext  \t     | Triggered when the next page should be loaded.<br> Happens before loading of the next page starts. With this event it is possible to cancel the loading of the next page.<br> You can do this by returning false from your callback. | `null` |\r\n| eventOnReady  \t | Triggered when IAS and all the extensions have been initialized. | `null` |\r\n| eventOnPageChange  | Triggered when a used scroll to another page. | `null` |\r\n\r\n\r\n\r\n## Report\r\n\r\n- Report any issues [on the GitHub](https://github.com/kop/yii2-scroll-pager/issues).\r\n\r\n\r\n\r\n## License\r\n\r\n**yii2-scroll-pager** is released under the MIT License. See the bundled `LICENSE.md` for details.\r\n\r\n\r\n\r\n## Resources\r\n\r\n- [Project Page](http://kop.github.io/yii2-scroll-pager)\r\n- [Packagist Package](https://packagist.org/packages/kop/yii2-scroll-pager)\r\n- [Source Code](https://github.com/kop/yii2-scroll-pager)",
  "google": "UA-57284399-3",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}